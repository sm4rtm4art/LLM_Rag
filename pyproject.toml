[project]
name = "llm-rag"
version = "0.1.0"
description = "LLM RAG exploration project"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "chromadb>=0.6.3",
    "pydantic>=2.0",
    "duckdb>=0.8.0",
    "fastapi>=0.115.8",
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "langchain-openai>=0.0.2",
    "numpy>=1.26.4,<2",
    "pandas>=2.2.0",
    "pytest>=8.3.4",
    "PyPDF2>=3.0.0",
    "scikit-learn>=1.6.1",
    "sentence-transformers>=2.2.2",
    "tiktoken>=0.9.0",
    "torch>=2.1.0",
    "transformers>=4.49.0",
    "uvicorn>=0.34.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.23.5",  # Added for async tests
    "ruff>=0.9.7",
    "mypy>=1.15.0",
    "nbqa>=1.9.1",
    "jupyter>=1.1.1",
    "httpx>=0.24.0",  # Required for FastAPI TestClient
    "pre-commit>=4.1.0",  # Added for pre-commit hooks
    "pandas-stubs>=2.2.3",  # Added for mypy pandas type checking
]

[tool.bandit]
exclude_dirs = ["tests", "notebooks"]
skips = ["B101"]  # Skip assert statements

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = ["tests"]
python_files = ["test_*.py"]
pythonpath = ["src"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "asyncio: mark test as async test",
]

[tool.coverage.run]
source = ["src/llm_rag"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
show_missing = true
fail_under = 0  # Don't fail
warn_under = 60  # Warn if coverage is below 60%

[tool.ruff]
# Target Python version
target-version = "py312"
line-length = 120

[tool.ruff.lint]
# Enable rules
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "D",  # pydocstyle
]

# Ignore specific rules
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D203",  # One blank line before class (conflicts with D211)
    "D213",  # Multi-line summary second line (conflicts with D212)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]  # Ignore docstring issues in tests
".llm_rag/bin/*" = ["D", "E", "W"]  # Ignore issues in virtual environment scripts

[tool.ruff.lint.isort]
known-first-party = ["llm_rag"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
# Fix path issues
mypy_path = ["src"]
packages = ["llm_rag"]
namespace_packages = true
explicit_package_bases = true
exclude = ["src/llm_rag/document_processing", "tests", "scripts"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false

[[tool.mypy.overrides]]
module = "scripts.*"
disallow_untyped_defs = false
check_untyped_defs = false

[[tool.mypy.overrides]]
module = "numpy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "sentence_transformers.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "langchain.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "langchain_community.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "langchain_chroma.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "langchain_huggingface.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "transformers.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "chromadb.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pytest.*"
ignore_missing_imports = true

[tool.semantic_release]
version_variable = ["src/llm_rag/version.py:__version__", "llm_rag/version.py:__version__"]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
upload_to_pypi = false
upload_to_release = true
build_command = "uv pip install build && python -m build"
commit_message = "{version}"
changelog_file = "CHANGELOG.md"
major_on_zero = false
tag_format = "v{version}"
