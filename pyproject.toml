[project]
name = "llm-rag"
version = "0.1.0"
description = "LLM RAG exploration project"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "chromadb>=0.6.3",
    "fastapi>=0.115.8",
    "langchain>=0.3.19",
    "numpy>=2.2.3",
    "pandas>=2.2.3",
    "pytest>=8.3.4",
    "scikit-learn>=1.6.1",
    "sentence-transformers>=3.4.1",
    "torch>=2.6.0",
    "transformers>=4.49.0",
    "uvicorn>=0.34.0",
]

[project.scripts]
setup-dev = "pre-commit install --install-hooks"

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.23.5",  # Added for async tests
    "ruff>=0.9.7",
    "mypy>=1.15.0",
    "nbqa>=1.9.1",
    "jupyter>=1.1.1",
    "httpx>=0.24.0",  # Required for FastAPI TestClient
]

[tool.bandit]
exclude_dirs = ["tests", "notebooks"]
skips = ["B101"]  # Skip assert statements

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = ["tests"]
python_files = ["test_*.py"]
asyncio_mode = "auto"
# Add explicit loop scope configuration
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["src/llm_rag"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
show_missing = true
fail_under = 0  # Don't fail
warn_under = 60  # Warn if coverage is below 60%
