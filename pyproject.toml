[project]
name = "llm-rag"
version = "0.1.2"
description = "LLM RAG exploration project"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "chromadb>=0.6.3",
    "pydantic>=2.0",
    "duckdb>=0.8.0",
    "fastapi>=0.115.8",
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "langchain-chroma>=0.2.0",
    "langchain-huggingface>=0.0.2",
    "langdetect>=1.0.9",
    "numpy>=1.26.4,<3",
    "pandas>=2.2.0",
    "pytest>=8.3.4",
    "pypdf>=3.9.0",
    "rich>=13.3.5",
    "scikit-learn>=1.6.1",
    "sentence-transformers>=2.2.2",
    "tiktoken>=0.9.0",
    "torch>=2.1.0",
    "transformers>=4.49.0",
    "uvicorn>=0.34.0",
    "defusedxml>=0.7.1", # For secure XML parsing
    # Temporarily commented out to handle separately in Dockerfile
    # "llama-cpp-python>=0.2.56",
    # Hugging Face dependencies
    "accelerate>=0.32.1", # Needed for efficient model loading
    "safetensors>=0.4.2", # For secure model loading
    "bitsandbytes>=0.42.0", # For quantization support
    "optimum>=1.17.1", # Performance optimization for transformers
    # Table extraction dependencies
    "tabula-py>=2.8.0", # For extracting tables from PDFs
    # Image extraction dependencies
    "pdf2image>=1.16.3", # For converting PDF pages to images
    "pytesseract>=0.3.10", # For OCR on images
    "Pillow>=10.0.0", # For image processing
    "PyMuPDF>=1.22.5", # For PDF processing and rendering
    # Security-critical transitive dependencies
    "jinja2>=3.1.6",     # Fix security vulnerabilities
    "cryptography>=44.0.1", # Fix security vulnerabilities
    "urllib3>=2.2.2",    # Fix security vulnerabilities
    "twisted>=24.7.0",   # Fix security vulnerabilities
    "requests>=2.32.2",  # Fix security vulnerabilities
    "idna>=3.7",         # Fix security vulnerabilities
    "certifi>=2024.7.4", # Fix security vulnerabilities
    "configobj>=5.0.9",  # Fix security vulnerabilities
    "httpx>=0.24.0",  # Required for OllamaClient and FastAPI TestClient
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.23.5",  # Added for async tests
    "ruff>=0.9.7",
    "mypy>=1.15.0",
    "nbqa>=1.9.1",
    "jupyter>=1.1.1",
    "pre-commit>=4.1.0",  # Added for pre-commit hooks
    "pandas-stubs>=2.2.3",  # Added for mypy pandas type checking
    "promptfoo>=0.1.0",  # For LLM prompt testing and evaluation
    "bandit>=1.7.5",  # For security scanning
    "safety>=2.3.5",  # For checking package vulnerabilities
]

# Optional OpenAI integration
openai = [
    "langchain-openai>=0.0.2",
    "openai>=1.0.0",
]

[tool.bandit]
exclude_dirs = ["tests", "notebooks"]
skips = ["B101"]  # Skip assert statements

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = [".", "src"]
asyncio_default_fixture_loop_scope = "function"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "asyncio: mark test as async test",
    "local_only: marks tests that should only run on local environments",
]

[tool.coverage.run]
source = ["src/llm_rag"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
show_missing = true
fail_under = 0  # Don't fail

[tool.ruff]
# Target Python version
target-version = "py312"
line-length = 120

[tool.ruff.lint]
# Enable rules
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "D",  # pydocstyle
]

# Ignore specific rules
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D203",  # One blank line before class (conflicts with D211)
    "D213",  # Multi-line summary second line (conflicts with D212)
    # These rules are necessary to support modules with different indentation styles.
    # The comparison module and some other parts use tabs, while maintaining
    # consistent style within each module is more important than forcing a project-wide
    # change that could introduce bugs.
]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "E402"]  # Ignore docstring issues and import order in tests
"scripts/*" = ["E402"]  # Ignore import order in scripts
".llm_rag/bin/*" = ["D", "E", "W"]  # Ignore issues in virtual environment scripts
"tests/document_processing/comparison/*" = ["W191", "D206"]  # Ignore tab indentation issues
"src/llm_rag/document_processing/comparison/*" = ["W191", "D206"]  # Ignore tab indentation issues

[tool.ruff.lint.isort]
known-first-party = ["llm_rag"]

[tool.mypy]
python_version = "3.12"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = false
# exclude = ["scripts", "src/llm_rag/document_processing/loaders/__init__.py"]  # Exclude scripts directory and duplicate loader module
namespace_packages = true
explicit_package_bases = true
error_summary = false
follow_imports = "skip"
files = ["src", "tests"]  # Explicitly include both src and tests directories

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "langchain_core.*",
    "torch.*",
    "pypdf.*",
    "sentence_transformers.*",
    "chromadb.*",
    "llama_cpp.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "llm_rag.document_processing.*"
disallow_untyped_defs = false
check_untyped_defs = false
warn_return_any = false
ignore_errors = true
follow_imports = "skip"

[[tool.mypy.overrides]]
module = "llm_rag.vectorstore.*"
disallow_untyped_defs = false
check_untyped_defs = false
warn_return_any = false
ignore_errors = true
follow_imports = "skip"

[[tool.mypy.overrides]]
module = "src.llm_rag.*"
ignore_errors = true
follow_imports = "skip"

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true
follow_imports = "skip"

# Add exclusion for specific modules that cause duplicate module name errors
[[tool.mypy.overrides]]
module = "src.llm_rag.document_processing.loaders"
ignore_errors = true
follow_imports = "skip"

[tool.semantic_release]
version_variable = ["src/llm_rag/version.py:__version__", "llm_rag/version.py:__version__"]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
upload_to_pypi = false
upload_to_release = true
build_command = "uv pip install build && python -m build"
commit_message = "{version}"
changelog_file = "CHANGELOG.md"
major_on_zero = false
tag_format = "v{version}"

[tools.uv]
environments = { ".llm_rag" = { mode = "development" } }

[tool.cosmic-ray]
module-path = "src/llm_rag/document_processing/ocr/ocr_engine.py"
python-version = "3.12"
timeout = 60
excluded-modules = []
test-command = "pytest tests/document_processing/ocr/test_ocr_engine.py -v"

[tool.cosmic-ray.cloning]
method = "copy"
commands = []

[tool.cosmic-ray.execution-engine]
name = "local"

[tool.cosmic-ray.interceptors]
enabled = []
