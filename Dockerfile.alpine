# === Stage: UV ===
# Pull the official UV image to get the pre-built binaries.
FROM ghcr.io/astral-sh/uv:0.8.22 AS uv

# === Stage 1: Builder ===
FROM python:3.14-alpine AS builder

# Set environment variables for performance and timeouts.
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_DEFAULT_TIMEOUT=600

WORKDIR /app

# Install build and system dependencies (Alpine equivalents)
RUN apk add --no-cache \
    build-base \
    cmake \
    pkgconf \
    git \
    curl \
    linux-headers \
    libffi-dev \
    openssl-dev \
    openblas-dev \
    lapack-dev \
    gfortran \
    musl-dev \
    g++ \
    jpeg-dev \
    zlib-dev

# Copy UV binaries from the UV stage into /usr/local/bin so that "uv" is in PATH.
COPY --from=uv /uv /usr/local/bin/uv
COPY --from=uv /uvx /usr/local/bin/uvx

# Verify UV installation and print version
RUN echo "UV location: $(which uv)" && echo "UV version: $(uv --version)"

# Copy dependency files
COPY pyproject.toml ./

# First install PyTorch 2.5.0+ CPU version explicitly
RUN uv pip install --system torch>=2.5.0 --extra-index-url https://download.pytorch.org/whl/cpu

# Now install the project dependencies - but skip torch since we installed it already
# Use --no-deps for torch to avoid reinstalling it with potentially incompatible versions
RUN uv pip install --system -e . --no-deps torch

# Now copy the rest of your application code
COPY . .

# Create a non-root user and adjust file ownership.
RUN adduser -D appuser && \
    chown -R appuser:appuser /app

# Create an entrypoint script that uses UV (or uvicorn) to run your tasks.
RUN echo '#!/bin/sh\nif [ "$1" = "api" ]; then\n  exec uvicorn llm_rag.api.main:app --host 0.0.0.0 --port 8000\nelse\n  exec "$@"\nfi' > /app/entrypoint.sh && \
    chmod +x /app/entrypoint.sh

# === Stage 2: Final Runtime Image ===
FROM python:3.14-alpine AS final

WORKDIR /app

# Install only the minimal runtime dependencies.
# libgomp is needed for multi-threading OpenMP support (equivalent to libgomp1)
RUN apk add --no-cache \
    libgomp \
    openblas \
    libjpeg

# Copy UV from the UV stage
COPY --from=uv /uv /usr/local/bin/uv
COPY --from=uv /uvx /usr/local/bin/uvx

# Copy installed Python packages and application from builder
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin
COPY --from=builder /app /app

# Install the package in development mode in the final stage
# But specify --no-deps for torch to avoid reinstalling it
RUN uv pip install --system -e /app --no-deps torch

# Ensure proper ownership and switch to a non-root user.
RUN adduser -D appuser && \
    chown -R appuser:appuser /app
USER appuser

EXPOSE 8000

ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["api"]
