name: Kubernetes Test with kind

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main, KIND_cluster_running]
  workflow_dispatch:

jobs:
  test-kubernetes:
    runs-on: ubuntu-latest
    # Allow this job to fail without affecting the workflow result
    continue-on-error: true
    # Only run if the CI/CD workflow was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Free disk space
        run: |
          echo "Freeing up disk space..."
          # Remove unnecessary large packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          # Clear docker images
          docker system prune -af
          # Show available space
          df -h

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # When triggered by workflow_run, we need to check out the same commit
          ref: ${{ github.event.workflow_run.head_sha || github.ref }}

      # Instead of building the image, pull it from Docker Hub
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine Docker image tag
        id: determine-tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # For manual runs, use the current SHA
            echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            # For workflow_run triggers, use the SHA from the triggering workflow
            echo "IMAGE_TAG=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Pull Docker image
        if: github.event_name != 'pull_request'
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/llm-rag:${{ steps.determine-tag.outputs.IMAGE_TAG }}
          # Tag it as llm-rag:latest for KIND
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/llm-rag:${{ steps.determine-tag.outputs.IMAGE_TAG }} llm-rag:latest

      # Fallback to building the image for PRs or if pull fails
      - name: Set up Docker Buildx (fallback)
        if: github.event_name == 'pull_request' || failure()
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (fallback)
        if: github.event_name == 'pull_request' || failure()
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: llm-rag:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Install KIND
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind version

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Create kind cluster
        run: |
          # Create a smaller cluster with fewer resources
          kind create cluster --name llm-rag-test --config ./k8s/kind-config.yaml --wait 120s

      - name: Load Docker image into kind
        run: |
          kind load docker-image llm-rag:latest --name llm-rag-test

      - name: Verify Kubernetes cluster
        run: |
          kubectl cluster-info
          kubectl get nodes -o wide

      - name: Create namespace
        run: |
          kubectl create namespace llm-rag-test

      - name: Deploy Kubernetes resources
        run: |
          # Update image reference in deployment if needed
          sed -i 's|image: .*llm-rag:.*|image: llm-rag:latest|g' k8s/deployment.yaml

          # Deploy config map
          kubectl apply -f k8s/configmap.yaml -n llm-rag-test

          # Deploy PVC
          kubectl apply -f k8s/pvc.yaml -n llm-rag-test

          # Deploy application
          kubectl apply -f k8s/deployment.yaml -n llm-rag-test

          # Deploy service
          kubectl apply -f k8s/service.yaml -n llm-rag-test

          # Install NGINX Ingress Controller
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml

          # Wait for ingress controller to be ready
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=90s

          # Deploy ingress
          kubectl apply -f k8s/ingress.yaml -n llm-rag-test

      - name: Wait for pods to be ready
        run: |
          kubectl wait --for=condition=ready pod --selector=app=llm-rag -n llm-rag-test --timeout=180s

      - name: Run test
        run: |
          # Create a testing pod to simulate an LLM query
          kubectl run test-client --image=curlimages/curl:8.1.2 -n llm-rag-test -- sleep 3600
          kubectl wait --for=condition=ready pod/test-client -n llm-rag-test --timeout=60s

          # Copy test script to pod
          kubectl cp k8s/test-script.sh test-client:/tmp/test-script.sh -n llm-rag-test
          kubectl exec test-client -n llm-rag-test -- chmod +x /tmp/test-script.sh

          # Run test script
          kubectl exec test-client -n llm-rag-test -- /tmp/test-script.sh

      - name: Get logs for debugging
        if: ${{ failure() }}
        run: |
          echo "=== Deployment logs ==="
          kubectl get all -n llm-rag-test
          kubectl describe pods -n llm-rag-test
          kubectl logs -l app=llm-rag -n llm-rag-test --tail=100 || true
          echo "=== Events ==="
          kubectl get events -n llm-rag-test --sort-by=.metadata.creationTimestamp

      - name: Clean up
        if: ${{ always() }}
        run: |
          kubectl delete namespace llm-rag-test || true
          kind delete cluster --name llm-rag-test || true
