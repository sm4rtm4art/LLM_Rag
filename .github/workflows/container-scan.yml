name: Container Security Scan

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: write

on:
  pull_request:
    branches: [main]
    paths:
      - "Dockerfile"
      - ".github/trivy-container.yml"
      - "docker-compose*.yml"
      - "**/requirements*.txt"
      - "pyproject.toml"
  workflow_dispatch:
    inputs:
      scan_level:
        description: "Scan level (quick/full)"
        required: true
        default: "full"
        type: choice
        options:
          - quick
          - full
  schedule:
    # - cron: "0 1 * * 1" # Weekly Monday 1:00 AM UTC

jobs:
  container-scan:
    runs-on: ubuntu-latest
    env:
      SCAN_MODE: ${{ github.event_name == 'pull_request' && 'quick' || (github.event_name == 'workflow_dispatch' && github.event.inputs.scan_level) || 'full' }}

    steps:
      - uses: actions/checkout@v4

      - name: Aggressive cleanup before Docker build
        run: |
          echo "Disk before:"
          df -h
          sudo rm -rf /usr/share/dotnet /opt/ghc /opt/hostedtoolcache /usr/local/lib/android || true
          docker system prune -af || true
          docker builder prune -af || true
          docker volume prune -f || true
          echo "Disk after:"
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker diagnostics (debug)
        run: |
          docker version
          docker info
          docker buildx version

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build the Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: localhost/llm-rag:${{ github.sha }}
          push: false
          cache-from: type=gha,scope=container-scan
          cache-to: type=gha,mode=max,scope=container-scan

      - name: Check image exists
        run: docker image ls | grep localhost/llm-rag

      - name: Cache Trivy vulnerability database
        uses: actions/cache@v4
        with:
          path: .trivy-cache
          key: trivy-db-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: Run quick vulnerability scan
        if: env.SCAN_MODE == 'quick'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: localhost/llm-rag:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          timeout: "5m"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          cache-dir: .trivy-cache

      - name: Run full vulnerability scan
        if: env.SCAN_MODE == 'full'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: localhost/llm-rag:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"
          timeout: "10m"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          cache-dir: .trivy-cache

      - name: Run secrets and config scan
        if: env.SCAN_MODE == 'full' || github.event_name == 'schedule'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: localhost/llm-rag:${{ github.sha }}
          format: "sarif"
          output: "trivy-comprehensive.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"
          timeout: "10m"
          exit-code: "0"
          ignore-unfixed: true
          scan-type: "config,secret"
          cache-dir: .trivy-cache

      - name: Upload vulnerability scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
          category: "trivy-container"

      - name: Upload comprehensive scan results
        if: env.SCAN_MODE == 'full' || github.event_name == 'schedule'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-comprehensive.sarif"
          category: "trivy-container-comprehensive"

      - name: Generate scan summary for PR comment
        if: github.event_name == 'pull_request'
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image --cache-dir .trivy-cache --format table localhost/llm-rag:${{ github.sha }} > trivy-summary.txt

          CRITICAL=$(grep -c 'CRITICAL' trivy-summary.txt || echo 0)
          HIGH=$(grep -c 'HIGH' trivy-summary.txt || echo 0)
          MEDIUM=$(grep -c 'MEDIUM' trivy-summary.txt || echo 0)

          {
            echo "## üîí Container Security Scan Results"
            echo "### Image: \`localhost/llm-rag:${{ github.sha }}\`"
            echo ""
            echo "| Severity | Count |"
            echo "|----------|-------|"
            echo "| üî¥ CRITICAL | $CRITICAL |"
            echo "| üü† HIGH     | $HIGH |"
            echo "| üü° MEDIUM   | $MEDIUM |"
            echo ""
            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "‚ö†Ô∏è **Action required**: Please address the critical/high vulnerabilities before merging."
              echo ""
            fi
            echo "<details><summary>View detailed scan results</summary>"
            echo ""
            echo '```'
            cat trivy-summary.txt
            echo '```'
            echo ""
            echo "üí° **Remediation Tips:**"
            echo "- Update base images to latest versions"
            echo "- Use specific package versions instead of latest tags"
            echo "- Consider multi-stage builds to reduce attack surface"
            echo "</details>"
          } > trivy-summary.md

      - name: Comment PR with scan results
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: trivy-summary.md
          header: container-scan

      - name: Fallback on Build Failure
        if: failure()
        run: |
          echo "::error::Build failed. Please check your Dockerfile or image dependencies for issues."
