name: Semantic Versioning

on:
  push:
    branches:
      - main
    paths-ignore:
      - "pyproject.toml" # Avoid recursive triggers
      - "CHANGELOG.md" # Avoid recursive triggers

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Determine version bump
        id: version-bump
        run: |
          # Get commit messages since last tag
          COMMIT_MESSAGES=$(git log $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD~10)..HEAD --pretty=format:"%s")

          # Check for keywords in commit messages to determine bump type
          if echo "$COMMIT_MESSAGES" | grep -q -i -E "^(feat|feature)(\([^)]+\))?!:"; then
            BUMP_TYPE="major"
          elif echo "$COMMIT_MESSAGES" | grep -q -i -E "^(feat|feature)(\([^)]+\))?:"; then
            BUMP_TYPE="minor"
          elif echo "$COMMIT_MESSAGES" | grep -q -i -E "^(fix|docs|style|refactor|perf|test|chore)(\([^)]+\))?:"; then
            BUMP_TYPE="patch"
          else
            BUMP_TYPE="patch"  # Default to patch if no conventional commit format found
          fi

          echo "Determined bump type: $BUMP_TYPE"
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump-version
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(grep -m 1 'version = ' pyproject.toml | cut -d '"' -f 2)
          echo "Current version: $CURRENT_VERSION"

          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Bump version based on determined type
          if [ "${{ steps.version-bump.outputs.bump_type }}" == "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "${{ steps.version-bump.outputs.bump_type }}" == "minor" ]; then
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
          else
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          fi

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update version in pyproject.toml
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml

      - name: Generate changelog
        run: |
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Get commit messages since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo HEAD~10)

          # Prepare new changelog entry
          CHANGELOG_ENTRY="## v${{ steps.bump-version.outputs.new_version }} ($(date +'%Y-%m-%d'))\n\n"

          # Group commits by type
          FEATURES=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" | grep -i -E "^- (feat|feature)(\([^)]+\))?:")
          FIXES=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" | grep -i -E "^- (fix)(\([^)]+\))?:")
          DOCS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" | grep -i -E "^- (docs)(\([^)]+\))?:")
          OTHER=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" | grep -v -i -E "^- (feat|feature|fix|docs)(\([^)]+\))?:")

          # Add sections to changelog entry
          if [ ! -z "$FEATURES" ]; then
            CHANGELOG_ENTRY+="### Features\n\n$FEATURES\n\n"
          fi

          if [ ! -z "$FIXES" ]; then
            CHANGELOG_ENTRY+="### Bug Fixes\n\n$FIXES\n\n"
          fi

          if [ ! -z "$DOCS" ]; then
            CHANGELOG_ENTRY+="### Documentation\n\n$DOCS\n\n"
          fi

          if [ ! -z "$OTHER" ]; then
            CHANGELOG_ENTRY+="### Other Changes\n\n$OTHER\n\n"
          fi

          # Insert new changelog entry at the top (after the title)
          sed -i "2i\\$CHANGELOG_ENTRY" CHANGELOG.md

      - name: Commit and push changes
        run: |
          git add pyproject.toml CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.bump-version.outputs.new_version }}"
          git tag -a "v${{ steps.bump-version.outputs.new_version }}" -m "Release v${{ steps.bump-version.outputs.new_version }}"
          git push origin main --tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.bump-version.outputs.new_version }}"
          name: "Release v${{ steps.bump-version.outputs.new_version }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
