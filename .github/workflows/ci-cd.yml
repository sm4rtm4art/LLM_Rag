name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * *" # Run daily at midnight UTC

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      # Add caching for dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/uv
            ~/.local/bin
          key: ${{ runner.os }}-python-3.12-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-3.12-uv-

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install security tools
        run: uv pip install --system bandit safety

      - name: Run Bandit
        run: bandit -r src/ -c pyproject.toml -ll

      - name: Run Safety Check
        run: safety check

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"] # Enforcing only Python 3.12 due to requirement
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache UV and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/uv
            ~/.local/bin
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-uv-

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv pip install --system ".[dev]"

      - name: Run Ruff format check on Python files
        run: ruff format --check --config .config/ruff/ruff.toml "src/" "tests/"

      - name: Run Ruff linting on Python files
        run: ruff check --config .config/ruff/ruff.toml "src/" "tests/"

      - name: Run Ruff on notebooks
        run: nbqa ruff notebooks/
          nbqa ruff format notebooks/

      - name: Run mypy
        run: mypy --config-file .config/mypy/mypy.ini src tests

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"] # Enforcing only Python 3.12
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache UV and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/uv
            ~/.local/bin
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-uv-

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv pip install --system ".[test]"

      - name: Run tests with coverage
        run: pytest --cov=src tests/ --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  build:
    needs: [lint, test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t llm-rag --build-arg PYTHON_VERSION=3.12 .
