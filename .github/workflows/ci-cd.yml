name: Optimized CI/CD Pipeline

permissions:
  actions: read
  contents: read
  security-events: write

on:
  push:
    branches: ["*"]
  pull_request:
    branches: [main]
    paths:
      - ".github/workflows/**"
      - "k8s/**"
  workflow_dispatch:
    inputs:
      deploy_target:
        description: "Environment to deploy to"
        required: false
        default: "dev"
        type: choice
        options:
          - dev
          - staging

env:
  PYTHON_VERSION: "3.12"
  UV_LINK_MODE: copy

defaults:
  run:
    shell: bash

jobs:
  bash-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update && sudo apt-get install -y shellcheck
      - run: curl -sS https://webinstall.dev/shfmt | bash && echo "$HOME/.local/bin" >> $GITHUB_PATH
      - run: find scripts -name "*.sh" -exec shellcheck {} \;
      - run: find scripts -name "*.sh" -exec shfmt -d {} \;
      - run: scripts/test_bash_scripts.sh

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for better Git operations
          fetch-tags: true # Fetch all tags
      - name: Safety vulnerability scan
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
          args: --full-report

      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - run: python -m venv .venv && echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH
      - run: .venv/bin/python -m pip install bandit
      - run: bandit -r src -c pyproject.toml -f json -o bandit.json
      - uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: bandit.json

      # Trivy filesystem scan
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: cache-trivy-${{ github.run_id }}
          restore-keys: |
            cache-trivy-
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.3
          # Install jq for combining SARIF reports
          sudo apt-get update && sudo apt-get install -y jq
      - name: Run Trivy filesystem scan
        env:
          TRIVY_NO_PROGRESS: true
          TRIVY_CACHE_DIR: ~/.cache/trivy
        run: |
          trivy --cache-dir ~/.cache/trivy image --download-db-only
          # Only scan changed files in PRs and pushes
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, ensure we fetch the base branch first
            git fetch origin ${{ github.base_ref }} || echo "Could not fetch base branch, falling back to minimal scan"
            if git rev-parse --verify origin/${{ github.base_ref }} >/dev/null 2>&1; then
              CHANGED_DIRS=$(git diff --name-only --diff-filter=ACMRT origin/${{ github.base_ref }} ${{ github.sha }} | xargs -n1 dirname 2>/dev/null | sort -u | tr '\n' ' ')
            else
              echo "Base branch not found, performing minimal scan"
              CHANGED_DIRS=""
            fi
          else
            # For pushes, try to get changed directories in the last commit
            if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
              CHANGED_DIRS=$(git diff --name-only --diff-filter=ACMRT HEAD^ HEAD | xargs -n1 dirname 2>/dev/null | sort -u | tr '\n' ' ')
            else
              echo "Unable to determine changed files (possibly first commit or shallow clone)"
              CHANGED_DIRS=""
            fi
          fi

          if [ -n "$CHANGED_DIRS" ]; then
            echo "Scanning directories with changes: $CHANGED_DIRS"
            # For each changed directory, run a separate scan
            for dir in $CHANGED_DIRS; do
              if [ -d "$dir" ]; then
                echo "Scanning directory: $dir"
                # Sanitize directory name for the output file (replace / with _)
                safe_name=$(echo "$dir" | tr '/' '_')
                trivy fs --format sarif --output "trivy-${safe_name}.sarif" --severity CRITICAL,HIGH "$dir"
              fi
            done
            # Combine SARIF reports if multiple exist
            if [ $(ls -1 trivy-*.sarif 2>/dev/null | wc -l) -gt 1 ]; then
              echo "Combining multiple SARIF reports"
              # Properly combine SARIF files - this merges the 'runs' arrays from all files
              jq -s '{ "$schema": .[0]["$schema"], version: .[0].version, runs: [ .[].runs[] ] }' trivy-*.sarif > trivy-results.sarif
            elif [ $(ls -1 trivy-*.sarif 2>/dev/null | wc -l) -eq 1 ]; then
              echo "Using single SARIF report"
              mv trivy-*.sarif trivy-results.sarif
            else
              # Create an empty SARIF report if no scans were performed
              echo "No SARIF reports generated, creating empty template"
              echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[]}' > trivy-results.sarif
            fi
          else
            echo "No relevant directories changed, performing minimal scan"
            trivy fs --format sarif --output trivy-results.sarif --severity CRITICAL,HIGH --skip-dirs="tests/" --skip-dirs=".github/" .
          fi
      - name: Upload Trivy SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
      - run: python -m venv .venv && echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH
      - run: uv pip install -e .[dev] ruff mypy
      - run: ruff format src tests && ruff check src tests && mypy src tests

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
      - run: python -m venv .venv && echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH
      - run: uv pip install pytest pytest-cov pytest-asyncio sentence-transformers chromadb -e .[dev]
      - run: .venv/bin/python -m pytest --cov=src/llm_rag --cov-report=xml -v

  semantic-release:
    needs: [lint, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: "${{ env.PYTHON_VERSION }}"
      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
      - run: python -m venv .venv && echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH
      - run: uv pip install python-semantic-release
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: .venv/bin/semantic-release publish

  docker-build:
    needs: [bash-lint, security, lint, test]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/llm-rag:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/llm-rag:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/llm-rag:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/llm-rag:cache,mode=max
          platforms: linux/amd64

      # Trivy container scan
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: cache-trivy-container-${{ github.run_id }}
          restore-keys: |
            cache-trivy-container-
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/llm-rag:${{ github.sha }}
          format: "sarif"
          output: "trivy-container-results.sarif"
          severity: "CRITICAL,HIGH"
      - name: Upload Trivy container scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-container-results.sarif
          category: container

  deploy:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      # Check if Docker image exists
      - name: Check if Docker image exists
        id: check-image
        continue-on-error: true
        run: |
          if curl -s -f -L -H "Authorization: Bearer ${{ secrets.DOCKERHUB_TOKEN }}" "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/llm-rag/tags/${{ github.sha }}" &>/dev/null; then
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "image_exists=false" >> $GITHUB_OUTPUT
            echo "::warning::Docker image not built. Skipping deployment."
          fi

      # Configure environment
      - name: Configure environment
        if: steps.check-image.outputs.image_exists == 'true'
        id: config-env
        run: |
          if [ "${{ github.event.inputs.deploy_target }}" == "staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "namespace=llm-rag-staging" >> $GITHUB_OUTPUT
            echo "config_secret=KUBE_CONFIG_STAGING" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "namespace=llm-rag-dev" >> $GITHUB_OUTPUT
            echo "config_secret=KUBE_CONFIG_DEV" >> $GITHUB_OUTPUT
          fi

      # Set up kubectl
      - uses: azure/setup-kubectl@v3
        if: steps.check-image.outputs.image_exists == 'true'

      # Set up kubeconfig
      - name: Configure kubectl
        if: steps.check-image.outputs.image_exists == 'true'
        id: kubeconfig
        run: |
          mkdir -p $HOME/.kube
          CONFIG_EXISTS="false"
          if [ "${{ steps.config-env.outputs.config_secret }}" == "KUBE_CONFIG_STAGING" ]; then
            if [ -n "${{ secrets.KUBE_CONFIG_STAGING }}" ]; then
              echo "${{ secrets.KUBE_CONFIG_STAGING }}" > $HOME/.kube/config
              CONFIG_EXISTS="true"
              echo "config_exists=true" >> $GITHUB_OUTPUT
            else
              echo "config_exists=false" >> $GITHUB_OUTPUT
              echo "::warning::No Kubernetes config found for staging."
            fi
          else
            if [ -n "${{ secrets.KUBE_CONFIG_DEV }}" ]; then
              echo "${{ secrets.KUBE_CONFIG_DEV }}" > $HOME/.kube/config
              CONFIG_EXISTS="true"
              echo "config_exists=true" >> $GITHUB_OUTPUT
            else
              echo "config_exists=false" >> $GITHUB_OUTPUT
              echo "::warning::No Kubernetes config found for dev."
            fi
          fi

          if [ "$CONFIG_EXISTS" == "true" ]; then
            chmod 600 $HOME/.kube/config
          fi

      # Verify Kubernetes connectivity
      - name: Verify Kubernetes connectivity
        if: steps.check-image.outputs.image_exists == 'true' && steps.kubeconfig.outputs.config_exists == 'true'
        id: verify-k8s
        continue-on-error: true
        run: |
          if kubectl cluster-info; then
            echo "k8s_connected=true" >> $GITHUB_OUTPUT
            kubectl create namespace ${{ steps.config-env.outputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -
          else
            echo "k8s_connected=false" >> $GITHUB_OUTPUT
            echo "::warning::Kubernetes connection failed – skipping deployment."
          fi

      # Update and apply deployment
      - name: Deploy to Kubernetes
        if: steps.check-image.outputs.image_exists == 'true' && steps.verify-k8s.outputs.k8s_connected == 'true'
        run: |
          # Update deployment image and environment
          sed -i "s|\${DOCKERHUB_USERNAME}/llm-rag:.*|${{ secrets.DOCKERHUB_USERNAME }}/llm-rag:${{ github.sha }}|g" k8s/deployment.yaml
          sed -i "s|ENVIRONMENT: \".*\"|ENVIRONMENT: \"${{ steps.config-env.outputs.environment }}\"|g" k8s/deployment.yaml

          # Apply deployment
          kubectl apply -f k8s/deployment.yaml -n ${{ steps.config-env.outputs.namespace }}
          kubectl rollout status deployment/llm-rag -n ${{ steps.config-env.outputs.namespace }} --timeout=120s

      # Show deployment status
      - name: Show deployment status
        if: steps.check-image.outputs.image_exists == 'true' && steps.verify-k8s.outputs.k8s_connected == 'true'
        run: |
          echo "=== Deployment status ==="
          kubectl get all -n ${{ steps.config-env.outputs.namespace }} -l app=llm-rag
          echo "=== Deployment logs ==="
          kubectl logs -l app=llm-rag -n ${{ steps.config-env.outputs.namespace }} --tail=50 || true
          echo "=== Events ==="
          kubectl get events -n ${{ steps.config-env.outputs.namespace }} --sort-by=.metadata.creationTimestamp | grep llm-rag || true
