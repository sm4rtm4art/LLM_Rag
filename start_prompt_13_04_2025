    Objective: Implement the initial components for the OCR pipeline as defined in Phase 1 of EXPANSION_PLAN.md.

    Context:
    - Reference EXPANSION_PLAN.md for Phase 1 tasks and goals.
    - Reference REFACTORING_PLAN.md for architectural context (modularity, existing utilities).
    - Strictly adhere to all rules defined in .cursor/rules/.cursorrules (Python 3.12, uv, FastAPI/Pydantic where applicable, PEP 8, meaningful names, docstrings, type hints, testing, exception handling).

    Tasks:
    1.  Create the directory structure: `src/llm_rag/document_processing/ocr/`.
    2.  Implement `src/llm_rag/document_processing/ocr/pdf_converter.py`:
        - Create a class (e.g., `PDFImageConverter`) responsible for taking a PDF file path.
        - Use the `PyMuPDF` library (`fitz`) to render each page into a high-resolution image (e.g., return a generator of PIL Image objects).
        - Include configuration options (e.g., DPI for rendering).
        - Implement error handling for file access and PDF processing issues, using utilities from `src/llm_rag/utils/errors.py` if appropriate.
        - Add logging using `src/llm_rag/utils/logging.py`.
        - Include comprehensive docstrings and type hints.
        - Write basic unit tests for this module (e.g., using a sample PDF and mocking file system interactions if needed).
    3.  Implement `src/llm_rag/document_processing/ocr/ocr_engine.py`:
        - Create a class (e.g., `TesseractOCREngine`) acting as a wrapper for Tesseract.
        - It should accept an image (e.g., PIL Image object) as input.
        - Use the `pytesseract` library to perform OCR and return the extracted raw text.
        - Include configuration options (e.g., Tesseract path, language models, page segmentation mode).
        - Implement error handling for Tesseract execution issues.
        - Add logging using `src/llm_rag/utils/logging.py`.
        - Include comprehensive docstrings and type hints.
        - Write basic unit tests for this module (e.g., mocking the `pytesseract.image_to_string` call).
    4.  Ensure all dependencies (`PyMuPDF`, `pytesseract`, `Pillow`) are added using `uv`.
    5.  Apply code formatting (e.g., using black/ruff if configured) to ensure PEP 8 compliance.

    Deliverables:
    - New/modified Python files: `src/llm_rag/document_processing/ocr/__init__.py`, `pdf_converter.py`, `ocr_engine.py`.
    - Associated test files (e.g., `tests/document_processing/ocr/test_pdf_converter.py`, `tests/document_processing/ocr/test_ocr_engine.py`).
    - Updates to dependency files managed by `uv`.
